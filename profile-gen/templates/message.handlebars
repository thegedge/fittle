// DO NOT EDIT -- generated code

{{~#*inline "components"}}
    {{~#if components}}
                    let bits = value.{{to_bits_function}}();
                    let mut bit_reader = BitReader::new(&bits);
        {{~#each components}}
            {{~#with_lookup ../../fields field as |name field|}}
                    {
                        bit_reader.read::<{{field.field_storage_type}}>({{bits}}).map(|bits_value| {
                            self.from_content({{field.number}}, Field::One(FieldContent::{{field.field_content}}(bits_value)));
                        });
                    }
            {{~/with_lookup}}
        {{~/each}}
    {{~/if}}
{{~/inline~}}

{{~#*inline "one"~}}
                field.one().map(|v| {
                    let value = {{field_base_type}}::from(v);
                    {{~> components}}
    {{~#if conversion_function}}
                    ({{conversion_function}})(value)
    {{~else}}
                    value
    {{~/if}}
                })
{{~/inline~}}

{{~#*inline "many"~}}
                field.many().map(|v| {
                    let value = v.into_iter().map({{field_base_type}}::from).collect::<Vec<_>>();
                    {{~> components}}
    {{~#if conversion_function}}
                    value.into_iter().map({{conversion_function}}).collect()
    {{~else}}
                    value
    {{~/if}}
                })
{{~/inline}}

use byteorder::{
    ByteOrder,
    ReadBytesExt
};

use serde::Serialize;

#[allow(unused_imports)]
use crate::bits::BitReader;

#[allow(unused_imports)]
use crate::fields::{
    Field,
    FieldContent,
    FieldDefinition,
};

#[derive(Debug, Default, Serialize)]
pub struct {{name}} {
{{~#sorted fields "name"}}
    #[serde(skip_serializing_if = "Option::is_none")]
    {{name}}: Option<{{field_type}}>,
{{/sorted~}}
}

impl {{name}} {
    pub fn from_fields<Order, Reader>(reader: &mut Reader, field_defs: &Vec<FieldDefinition>)
        -> Result<Self, std::io::Error>
        where
            Order: ByteOrder,
            Reader: ReadBytesExt,
    {
        let mut msg: Self = Default::default();
        for field_def in field_defs {
            let (number, field) = field_def.content_from::<Order, Reader>(reader)?;
            msg.from_content(number, field);
        }

        Ok(msg)
    }

    fn from_content(&mut self, number: u8, field: Field) {
        match number {
{{~#sorted fields "number"}}
            {{number}} => {
                self.{{name}} = {{~> (field_class) .}}
            },
{{/sorted}}
            _ => (),
        }
    }
}
