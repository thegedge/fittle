// DO NOT EDIT -- generated code
{{~#*inline "conversion"~}}
    {{~#if conversion_function~}}
                    {{> @partial-block}}
    {{~else}}
                    value
    {{~/if}}
{{~/inline~}}

{{~#*inline "components"}}
    {{~#if components}}
                    let bits = value.{{to_bits_function}}();
                    let mut bit_reader = BitReader::new(&bits);
        {{~#each components as |component|}}
            {{~#with_lookup @root.fields field as |field name|}}
                    {
                        bit_reader.read::<{{field.field_storage_type}}>({{component.bits}}).map(|bits_value| {
                            self.from_content({{field.number}}, Field::One(FieldContent::{{field.field_content}}(bits_value)));
                        });
                    }
            {{~/with_lookup}}
        {{~/each}}
    {{~/if}}
{{~/inline~}}

{{~#*inline "one"~}}
                field.one().map(|v| {
                    let value = {{field_base_type}}::from(v);
                    {{~> components}}
    {{~#> conversion}}
                    ({{conversion_function}})(value)
    {{~/conversion}}
                })
{{~/inline~}}

{{~#*inline "many"~}}
                field.many().map(|v| {
                    let value = v.into_iter().map({{field_base_type}}::from).collect::<Vec<_>>();
                    {{~> components}}
    {{~#> conversion}}
                    value.into_iter().map({{conversion_function}}).collect()
    {{~/conversion}}
                })
{{~/inline}}

{{~#*inline "dynamic_fields"~}}
{{~#each dynamic_fields as |dfields ref_field_name|}}
    {{~#each this.dfields as |dfield|}}
                match self.{{ref_field_name}} {
        {{~#each dfield.ref_field_values as |ref_field_value|}}
                    {{ref_field_value}} => {
                        self.{{dfield.name}} = {{> one dfield fields=@root.fields}},
                    },
        {{~/each}}
                    _ => (),
                }
    {{~/each}}
{{~/each}}
{{~/inline}}

{{~#*inline "field_declaration"}}
    #[serde(skip_serializing_if = "Option::is_none")]
    {{name}}: Option<{{field_type}}>,
{{/inline}}

use byteorder::{
    ByteOrder,
    ReadBytesExt
};

use serde::Serialize;

#[allow(unused_imports)]
use crate::bits::BitReader;

#[allow(unused_imports)]
use crate::fields::{
    Field,
    FieldContent,
    FieldDefinition,
};

#[derive(Debug, Default, Serialize)]
pub struct {{name}} {
{{~#sorted fields "name"~}}
    {{~> field_declaration~}}
{{~/sorted~}}

{{~#each fields~}}
    {{~#if dynamic_fields}}
    // Dynamic fields for {{name}}
    {{~/if~}}
    {{~#each dynamic_fields}}
        {{~#each this~}}
            {{~> field_declaration~}}
        {{~/each~}}
    {{~/each~}}
{{~/each~}}
}

impl {{name}} {
    pub fn from_fields<Order, Reader>(reader: &mut Reader, field_defs: &Vec<FieldDefinition>)
        -> Result<Self, std::io::Error>
        where
            Order: ByteOrder,
            Reader: ReadBytesExt,
    {
        let mut msg: Self = Default::default();
        for field_def in field_defs {
            let (number, field) = field_def.content_from::<Order, Reader>(reader)?;
            msg.from_content(number, field);
        }

        Ok(msg)
    }

    fn from_content(&mut self, number: u8, field: Field) {
        match number {
{{~#sorted fields "number"}}
    {{~#if number includeZero=true}}
            {{number}} => {
                self.{{name}} = {{> (field_class)}};
        {{~#if dynamic_fields}}

            {{~> dynamic_fields}}
        {{~/if}}
            },
    {{~/if}}
{{/sorted}}
            _ => (),
        }
    }
}
